def render_graph_testTAA():
	testTAA = createRenderGraph()
	DepthPass = createRenderPass("DepthPass", {'depthFormat': Format.D32Float})
	testTAA.addPass(DepthPass, "DepthPass")
	SkyBox = createRenderPass("SkyBox")
	testTAA.addPass(SkyBox, "SkyBox")
	CascadedShadowMaps = createRenderPass("CascadedShadowMaps")
	testTAA.addPass(CascadedShadowMaps, "CascadedShadowMaps")
	ForwardLightingPass = createRenderPass("ForwardLightingPass", {'sampleCount': 1, 'enableSuperSampling': False})
	testTAA.addPass(ForwardLightingPass, "ForwardLightingPass")
	TemporalAA = createRenderPass("TemporalAA")
	testTAA.addPass(TemporalAA, "TemporalAA")
	BlitPass = createRenderPass("BlitPass", {'filter': Filter.Linear})
	testTAA.addPass(BlitPass, "BlitPass")
	testTAA.addEdge("TemporalAA.colorOut", "BlitPass.src")
	testTAA.addEdge("ForwardLightingPass.color", "TemporalAA.colorIn")
	testTAA.addEdge("ForwardLightingPass.motionVecs", "TemporalAA.motionVecs")
	testTAA.addEdge("DepthPass.depth", "ForwardLightingPass.depth")
	testTAA.addEdge("DepthPass.depth", "SkyBox.depth")
	testTAA.addEdge("SkyBox.target", "ForwardLightingPass.color")
	testTAA.addEdge("DepthPass.depth", "CascadedShadowMaps.depth")
	testTAA.addEdge("CascadedShadowMaps.visibility", "ForwardLightingPass.visibilityBuffer")
	testTAA.markOutput("BlitPass.dst")
	return testTAA

testTAA = render_graph_testTAA()